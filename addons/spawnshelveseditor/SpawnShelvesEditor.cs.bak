using Godot;
using System;

[Tool]
public partial class SpawnShelvesEditor : EditorPlugin
{
    private Window pluginWindow;
    private Button toolbarButton;

    public override void _EnterTree()
    {
        // Create the main toolbar button
        toolbarButton = new Button
        {
            Text = "SpawnByDimensionsEditor"
        };
        toolbarButton.Pressed += ShowPluginWindow;
        
        // Add the button to the editor toolbar
        AddControlToContainer(CustomControlContainer.Toolbar, toolbarButton);
        
        // Initialize the plugin window
        InitializeWindow();
    }

    public override void _ExitTree()
    {
        // Clean up
        if (toolbarButton != null)
            toolbarButton.QueueFree();
        if (pluginWindow != null)
            pluginWindow.QueueFree();
    }

    private SpinBox GenerateSpinBox(int minSize=100)
    {
        return new SpinBox
        {
            MinValue = -100,
            MaxValue = 100,
            Step = 0.1f,
            CustomMinimumSize = new Vector2(minSize, 0)
        };
    }

    private void InitializeWindow()
    {
        pluginWindow = new Window
        {
            Title = "Custom Input Plugin",
            // InitialPosition = WindowInitialPosition.CenterScreen,
            Size = new Vector2I(500, 400),
            Exclusive = true,
            Unresizable = true,
            AlwaysOnTop = true,
            Visible = false
        };

        AddChild(pluginWindow);

        // Create margins around the content
        var marginContainer = new MarginContainer
        {
            ThemeTypeVariation = "MarginContainer",
            CustomMinimumSize = new Vector2(480, 380)
        };
        marginContainer.AddThemeConstantOverride("margin_left", 10);
        marginContainer.AddThemeConstantOverride("margin_right", 10);
        marginContainer.AddThemeConstantOverride("margin_top", 10);
        marginContainer.AddThemeConstantOverride("margin_bottom", 10);
        pluginWindow.AddChild(marginContainer);

        // Create a vertical container for all elements
        var vbox = new VBoxContainer();
        marginContainer.AddChild(vbox);

        // Vector3 input section
        var vectorLabel = new Label { Text = "Vector3 Input:" };
        vbox.AddChild(vectorLabel);

        var vectorContainer = new HBoxContainer();
        vbox.AddChild(vectorContainer);

        // X input
        var xLabel = new Label { Text = "X:" };
        vectorContainer.AddChild(xLabel);
        var xInput = GenerateSpinBox();
        vectorContainer.AddChild(xInput);

        // Y input
        var yLabel = new Label { Text = "Y:" };
        vectorContainer.AddChild(yLabel);
        var yInput = GenerateSpinBox();
        vectorContainer.AddChild(yInput);

        // Z input
        var zLabel = new Label { Text = "Z:" };
        vectorContainer.AddChild(zLabel);
        var zInput = GenerateSpinBox();
        vectorContainer.AddChild(zInput);

        // Float input section
        var floatLabel = new Label { Text = "Float Input:" };
        vbox.AddChild(floatLabel);

        var floatInput = GenerateSpinBox(150);
        vbox.AddChild(floatInput);

        // Text input section
        var textLabel = new Label { Text = "Text Input:" };
        vbox.AddChild(textLabel);

        var textInput = new LineEdit
        {
            CustomMinimumSize = new Vector2(200, 0),
            PlaceholderText = "Enter text here..."
        };
        vbox.AddChild(textInput);

        // Add some spacing
        vbox.AddChild(new HSeparator());

        // Button container for centering
        var buttonContainer = new HBoxContainer();
        buttonContainer.AddThemeConstantOverride("separation", 10);
        vbox.AddChild(buttonContainer);

        // Process button
        var processButton = new Button
        {
            Text = "Process Input",
            CustomMinimumSize = new Vector2(150, 40)
        };
        processButton.Pressed += () =>
        {
            var vector = new Vector3(
                (float)xInput.Value,
                (float)yInput.Value,
                (float)zInput.Value
            );
            // ProcessInput(vector, (float)floatInput.Value, textInput.Text);
        };
        buttonContainer.AddChild(processButton);

        // Close button
        var closeButton = new Button
        {
            Text = "Close",
            CustomMinimumSize = new Vector2(150, 40)
        };
        closeButton.Pressed += () => pluginWindow.Hide();
        buttonContainer.AddChild(closeButton);

        // Result label
        var resultLabel = new Label
        {
            AutowrapMode = TextServer.AutowrapMode.WordSmart
        };
        vbox.AddChild(resultLabel);

        // Handle window close button
        pluginWindow.CloseRequested += () => pluginWindow.Hide();

        // void ProcessInput(Vector3 vector, float floatValue, string textValue)
        // {
        //     string result = $"Processed Input:\n" +
        //                    $"Vector3: {vector}\n" +
        //                    $"Float: {floatValue}\n" +
        //                    $"Text: {textValue}";
            
        //     resultLabel.Text = result;
        //     GD.Print(result);
        // }
    }

    private void ShowPluginWindow()
    {
        if (pluginWindow != null)
        {
            pluginWindow.Show();
            pluginWindow.GrabFocus();
        }
    }
}